<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>살기 위해 산다</title>
  
  <subtitle>내가 좋아하는 모든 것을 적습니다.</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://github.com/j-haaaaan.github.io/"/>
  <updated>2018-07-21T08:50:26.662Z</updated>
  <id>https://github.com/j-haaaaan.github.io/</id>
  
  <author>
    <name>j-haaaaan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Toyota Corolla Price Prediction</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/21/proj-reg-toyota-01/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/21/proj-reg-toyota-01/</id>
    <published>2018-07-21T08:50:26.662Z</published>
    <updated>2018-07-21T08:50:26.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>이 프로젝트는 2017년 내가 데이터 사이언스 스쿨의 수강 당시 진행했던 회귀분석 프로젝트다.<br>기한이 조금 지나고 계속 신경은 안써서, 기억을 더듬어 볼 겸, 회귀분석 프로세스에 대해서도 재정립할 겸 포스팅해보려고 한다<font color="#C6C6C6"><del>(얼마나 거지같이 진행했었는지 성찰도..)</del></font>.</p><hr><h2 id="프로젝트-문제-정의"><a href="#프로젝트-문제-정의" class="headerlink" title="프로젝트 문제 정의"></a>프로젝트 문제 정의</h2><ul><li><p><strong><font color="blue">프로젝트의 목적</font></strong><br>본 프로젝트는 제시된 <strong>Toyota사 Corolla차량의 중고차 가격 train 데이터를 바탕으로, 회귀분석을 통해 새로이 제시되는 중고차 가격(test 데이터)을 예측</strong> 해 보는 것이다.</p></li><li><p><strong><font color="blue">데이터 크기</font></strong></p><ul><li>training data : 1019 rows, 39 columns</li><li>test data : 417 rows, 38 columns</li></ul></li><li><p><strong><font color="blue">프로젝트 평가</font></strong><br>실제 가격과 예측한 가격의 차이를 <font color="blue"><strong>Root-Mean-Squared-Error(RMSE)</strong></font> 를 통하여 채점한다.<br>평균 제곱근 편차(Root Mean Square Deviation; RMSD) 또는 평균 제곱근 오차(Root Mean Square Error; RMSE)는 <strong>추정 값 또는 모델이 예측한 값과 실제 환경에서 관찰되는 값의 차이를 다룰 때 흔히 사용하는 측도이다.</strong> 정밀도(precision)를 표현하는데 적합하다. 각각의 차이값은 잔차(residual)라고도 하며, 평균 제곱근 편차는 잔차들을 하나의 측도로 종합할 때 사용된다.<br><font color="#C6C6C6">(from WIKIPEDIA)</font></p></li></ul><script type="math/tex; mode=display">{\displaystyle \operatorname {RMSD} ({\hat {\theta }})={\sqrt {\operatorname {MSE} ({\hat {\theta }})}}={\sqrt {\operatorname {E} (({\hat {\theta }}-\theta )^{2})}}}</script><hr><h2 id="독립-변수-정리"><a href="#독립-변수-정리" class="headerlink" title="독립 변수 정리"></a>독립 변수 정리</h2><ul><li><p><strong><font color="blue">Id</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>데이터 고유 key, index와 일치하지 않음</li><li>ex) 1434</li></ul></li><li><p><strong><font color="blue">Model</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>차량의 모델명</li><li>ex) TOYOTA Corolla 1.6 LB LINEA TERRA 4/5-Doors</li></ul></li><li><p><strong><font color="blue">Price</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>가격(아마도 USD), <font color="red">예측해야 하는 Target(<script type="math/tex">y</script>)</font></li><li>ex) 8500</li></ul></li><li><p><strong><font color="blue">Age_08_04</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>연식(아마도 month)</li><li>ex) 71</li></ul></li><li><p><strong><font color="blue">Mfg_Month</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>생산(Manufacturing) 월</li><li>ex) 10</li></ul></li><li><p><strong><font color="blue">Mfg_Year</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>생산 연도</li><li>ex) 1998</li></ul></li><li><p><strong><font color="blue">KM</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>주행거리, 마일리지</li><li>ex) 17016</li></ul></li><li><p><strong><font color="blue">Fuel_Type</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>연료 타입</li><li>ex) Petrol</li></ul></li><li><p><strong><font color="blue">HP</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>마력.</li><li>ex) 86</li></ul></li><li><p><strong><font color="blue">Met_Color</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>메탈릭 페인팅 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Color</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>차량 색깔</li><li>ex) Blue</li></ul></li><li><p><strong><font color="blue">Automatic</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동변속기 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">CC</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>배기량(cc)</li><li>ex) 1600</li></ul></li><li><p><strong><font color="blue">Doors</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>도어 수</li><li>ex) 4</li></ul></li><li><p><strong><font color="blue">Cylinders</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>엔진 실린더 수</li><li>ex) 4</li></ul></li><li><p><strong><font color="blue">Gears</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>최대 변속단 수</li><li>ex) 5</li></ul></li><li><p><strong><font color="blue">Quarterly_Tax</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>분기별 납세액(?), 아마도 USD</li><li>ex) 69</li></ul></li><li><p><strong><font color="blue">Weight</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>차량 무게(아마도 kg)</li><li>ex) 1025</li></ul></li><li><p><strong><font color="blue">Mfr_Guarantee</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보증 기한 만료 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">BOVAG_Guarantee</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>운송회사 BOVAG의 보증 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Guarantee_Period</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보증 기한(아마도 year)</li><li>ex) 3</li></ul></li><li><p><strong><font color="blue">ABS</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>ABS 옵션 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airbag_1</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어백 옵션 1 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airbag_2</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어백 옵션 2 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airco</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어컨 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Automatic_airco</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동에어컨 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Boardcomputer</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보드컴퓨터 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">CD_Player</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>CD player 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Central_Lock</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>Central Lock 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Powered_Windows</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동 창문 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Power_Steering</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>파워 스티어링 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Radio</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>라디오 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Mistlamps</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>안개등 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Sport_Model</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>스포츠 모델 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Backseat_Divider</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>뒷좌석 divider 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Metallic_Rim</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>메탈릭 림 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Radio_cassette</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>라디오 카세트(?) 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Parking_Assistant</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>파킹 어시스턴트 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Tow_Bar</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>견인 바 탑재 여부, binary</li><li>ex) 1</li></ul></li></ul><hr><h2 id="분포-확인"><a href="#분포-확인" class="headerlink" title="분포 확인"></a>분포 확인</h2><p>히스토그램을 그려보면, 실수 데이터 / 카테고리 데이터 여부를 알기 쉽다.</p><p><img width="994" alt="2018-07-21 15 06 49" src="https://user-images.githubusercontent.com/32727529/43033786-46bf45fa-8d0b-11e8-800a-8fbe2659f76d.png"></p><p>사실상 연식, 주행거리, 무게를 제외하고는 실수데이터가 거의 없다. (거의 차량 옵션 여부)</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;이 프로젝트는 2017년 내가 데이터 사이언스 스쿨의 수강 당시 진행했던 회귀분석 프로젝트다.&lt;br&gt;기한이 조금 지나고 계속
        
      
    
    </summary>
    
      <category term="data science" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/"/>
    
      <category term="regression" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/regression/"/>
    
    
      <category term="data anaysis" scheme="https://github.com/j-haaaaan.github.io/tags/data-anaysis/"/>
    
      <category term="data" scheme="https://github.com/j-haaaaan.github.io/tags/data/"/>
    
      <category term="regression" scheme="https://github.com/j-haaaaan.github.io/tags/regression/"/>
    
      <category term="python" scheme="https://github.com/j-haaaaan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Toyota Corolla Price Prediction</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/21/proj-reg-toyota/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/21/proj-reg-toyota/</id>
    <published>2018-07-21T08:36:38.000Z</published>
    <updated>2018-07-21T08:36:38.516Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>이 프로젝트는 2017년 내가 데이터 사이언스 스쿨의 수강 당시 진행했던 회귀분석 프로젝트다.<br>기한이 조금 지나고 계속 신경은 안써서, 기억을 더듬어 볼 겸, 회귀분석 프로세스에 대해서도 재정립할 겸 포스팅해보려고 한다<font color="#C6C6C6"><del>(얼마나 거지같이 진행했었는지 성찰도..)</del></font>.</p><hr><h2 id="프로젝트-문제-정의"><a href="#프로젝트-문제-정의" class="headerlink" title="프로젝트 문제 정의"></a>프로젝트 문제 정의</h2><ul><li><p><strong><font color="blue">프로젝트의 목적</font></strong><br>본 프로젝트는 제시된 <strong>Toyota사 Corolla차량의 중고차 가격 train 데이터를 바탕으로, 회귀분석을 통해 새로이 제시되는 중고차 가격(test 데이터)을 예측</strong> 해 보는 것이다.</p></li><li><p><strong><font color="blue">데이터 크기</font></strong></p><ul><li>training data : 1019 rows, 39 columns</li><li>test data : 417 rows, 38 columns</li></ul></li><li><p><strong><font color="blue">프로젝트 평가</font></strong><br>실제 가격과 예측한 가격의 차이를 <font color="blue"><strong>Root-Mean-Squared-Error(RMSE)</strong></font> 를 통하여 채점한다.<br>평균 제곱근 편차(Root Mean Square Deviation; RMSD) 또는 평균 제곱근 오차(Root Mean Square Error; RMSE)는 <strong>추정 값 또는 모델이 예측한 값과 실제 환경에서 관찰되는 값의 차이를 다룰 때 흔히 사용하는 측도이다.</strong> 정밀도(precision)를 표현하는데 적합하다. 각각의 차이값은 잔차(residual)라고도 하며, 평균 제곱근 편차는 잔차들을 하나의 측도로 종합할 때 사용된다.<br><font color="#C6C6C6">(from WIKIPEDIA)</font></p></li></ul><script type="math/tex; mode=display">{\displaystyle \operatorname {RMSD} ({\hat {\theta }})={\sqrt {\operatorname {MSE} ({\hat {\theta }})}}={\sqrt {\operatorname {E} (({\hat {\theta }}-\theta )^{2})}}}</script><hr><h2 id="독립-변수-정리"><a href="#독립-변수-정리" class="headerlink" title="독립 변수 정리"></a>독립 변수 정리</h2><ul><li><p><strong><font color="blue">Id</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>데이터 고유 key, index와 일치하지 않음</li><li>ex) 1434</li></ul></li><li><p><strong><font color="blue">Model</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>차량의 모델명</li><li>ex) TOYOTA Corolla 1.6 LB LINEA TERRA 4/5-Doors</li></ul></li><li><p><strong><font color="blue">Price</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>가격(아마도 USD), <font color="red">예측해야 하는 Target(<script type="math/tex">y</script>)</font></li><li>ex) 8500</li></ul></li><li><p><strong><font color="blue">Age_08_04</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>연식(아마도 month)</li><li>ex) 71</li></ul></li><li><p><strong><font color="blue">Mfg_Month</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>생산(Manufacturing) 월</li><li>ex) 10</li></ul></li><li><p><strong><font color="blue">Mfg_Year</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>생산 연도</li><li>ex) 1998</li></ul></li><li><p><strong><font color="blue">KM</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>주행거리, 마일리지</li><li>ex) 17016</li></ul></li><li><p><strong><font color="blue">Fuel_Type</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>연료 타입</li><li>ex) Petrol</li></ul></li><li><p><strong><font color="blue">HP</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>마력.</li><li>ex) 86</li></ul></li><li><p><strong><font color="blue">Met_Color</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>메탈릭 페인팅 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Color</font></strong> <font color="gray">(class ‘str’)</font></p><ul><li>차량 색깔</li><li>ex) Blue</li></ul></li><li><p><strong><font color="blue">Automatic</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동변속기 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">CC</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>배기량(cc)</li><li>ex) 1600</li></ul></li><li><p><strong><font color="blue">Doors</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>도어 수</li><li>ex) 4</li></ul></li><li><p><strong><font color="blue">Cylinders</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>엔진 실린더 수</li><li>ex) 4</li></ul></li><li><p><strong><font color="blue">Gears</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>최대 변속단 수</li><li>ex) 5</li></ul></li><li><p><strong><font color="blue">Quarterly_Tax</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>분기별 납세액(?), 아마도 USD</li><li>ex) 69</li></ul></li><li><p><strong><font color="blue">Weight</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>차량 무게(아마도 kg)</li><li>ex) 1025</li></ul></li><li><p><strong><font color="blue">Mfr_Guarantee</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보증 기한 만료 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">BOVAG_Guarantee</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>운송회사 BOVAG의 보증 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Guarantee_Period</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보증 기한(아마도 year)</li><li>ex) 3</li></ul></li><li><p><strong><font color="blue">ABS</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>ABS 옵션 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airbag_1</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어백 옵션 1 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airbag_2</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어백 옵션 2 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Airco</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>에어컨 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Automatic_airco</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동에어컨 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Boardcomputer</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>보드컴퓨터 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">CD_Player</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>CD player 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Central_Lock</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>Central Lock 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Powered_Windows</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>자동 창문 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Power_Steering</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>파워 스티어링 옵션 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Radio</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>라디오 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Mistlamps</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>안개등 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Sport_Model</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>스포츠 모델 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Backseat_Divider</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>뒷좌석 divider 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Metallic_Rim</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>메탈릭 림 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Radio_cassette</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>라디오 카세트(?) 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Parking_Assistant</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>파킹 어시스턴트 탑재 여부, binary</li><li>ex) 1</li></ul></li><li><p><strong><font color="blue">Tow_Bar</font></strong> <font color="gray">(class ‘numpy.int64’)</font></p><ul><li>견인 바 탑재 여부, binary</li><li>ex) 1</li></ul></li></ul><hr><h2 id="분포-확인"><a href="#분포-확인" class="headerlink" title="분포 확인"></a>분포 확인</h2><p>히스토그램을 그려보면, 실수 데이터 / 카테고리 데이터 여부를 알기 쉽다.</p><p><img width="994" alt="2018-07-21 15 06 49" src="https://user-images.githubusercontent.com/32727529/43033786-46bf45fa-8d0b-11e8-800a-8fbe2659f76d.png"></p><p>사실상 연식, 주행거리, 무게를 제외하고는 실수데이터가 거의 없다. (거의 차량 옵션 여부)</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;이 프로젝트는 2017년 내가 데이터 사이언스 스쿨의 수강 당시 진행했던 회귀분석 프로젝트다.&lt;br&gt;기한이 조금 지나고 계속
        
      
    
    </summary>
    
      <category term="data science" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/"/>
    
      <category term="regression" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/regression/"/>
    
    
      <category term="data anaysis" scheme="https://github.com/j-haaaaan.github.io/tags/data-anaysis/"/>
    
      <category term="data" scheme="https://github.com/j-haaaaan.github.io/tags/data/"/>
    
      <category term="regression" scheme="https://github.com/j-haaaaan.github.io/tags/regression/"/>
    
      <category term="python" scheme="https://github.com/j-haaaaan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python 선형 회귀분석 기초</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/16/linear-regression/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/16/linear-regression/</id>
    <published>2018-07-16T06:28:35.000Z</published>
    <updated>2018-07-21T08:23:51.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="선형-회귀분석이란"><a href="#선형-회귀분석이란" class="headerlink" title="선형 회귀분석이란"></a>선형 회귀분석이란</h2><p>회귀분석(regression analysis)은, <br>독립 변수 <script type="math/tex">X</script>와 종속(출력) 변수 <script type="math/tex">y</script>간의 관계를 <strong>정량적으로</strong> 찾아내는 작업이다.<br>결정론적 모형은 단순히 독립 변수 <script type="math/tex">X</script>에 대해 대응하는 종속변수 <script type="math/tex">y</script>와 가장 비슷한 값 <strong><script type="math/tex">\hat{y}</script>를 출력하는 함수  <script type="math/tex">f(x)</script>를 찾는</strong> 과정이다.</p><script type="math/tex; mode=display">\hat{y} = f \left( x \right) \approx y</script><p>가장 기초적인 선형 회귀분석의 형태는 다음과 같다.</p><script type="math/tex; mode=display">\hat{y} = w_0 + w_1 x_1 + w_2 x_2 + \cdots + w_D x_D = w_0 + w^Tx</script><hr><h2 id="OLS"><a href="#OLS" class="headerlink" title="OLS"></a>OLS</h2><p>OLS(Ordinary Least Squares)는 가장 기본적인 결정론적 선형 회귀 방법으로 <strong>잔차제곱합(RSS: Residual Sum of Squares)를 최소화</strong> 하는 가중치 벡터를 행렬 미분으로 구하는 방법이다.</p><p>잔차 <script type="math/tex">e</script>는 다음과 같다.</p><script type="math/tex; mode=display">e = {y} - \hat{y} = y - Xw</script><p>실제 <script type="math/tex">y</script>에서 예측한 <script type="math/tex">\hat{y}</script>을 뺀 값이다.</p><hr><h2 id="NumPy를-이용한-선형회귀분석"><a href="#NumPy를-이용한-선형회귀분석" class="headerlink" title="NumPy를 이용한 선형회귀분석"></a>NumPy를 이용한 선형회귀분석</h2><p>우선 <code>make_regression</code> 명령을 사용하여 다음과 같이 1차원 특징 데이터 <script type="math/tex">x</script>와 이 값에 의존하는 <script type="math/tex">y</script>를 만든다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_regression</span><br><span class="line"></span><br><span class="line">bias = <span class="number">100</span></span><br><span class="line">X0, y, coef = make_regression(n_samples=<span class="number">50</span>, n_features=<span class="number">1</span>, bias=bias, noise=<span class="number">5</span>, coef=<span class="keyword">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line">X = sm.add_constant(X0)</span><br><span class="line">y = y.reshape(len(y), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>상관계수(coef)를 구해보면 다음과 같이 나온다.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">coef</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(52.43455968)</span><br></pre></td></tr></table></figure><p>즉 이 경우 <script type="math/tex">x</script>와 <script type="math/tex">y</script>는 다음과 같은 관계를 가진다.</p><script type="math/tex; mode=display">y = 50 + 52.43455968 x + \epsilon</script><p>최적가중치 <script type="math/tex">w^{\ast}</script>를 다음의 식을 이용해서 구해보면,</p><script type="math/tex; mode=display">w^{\ast} = (X^TX)^{-1} X^T y</script><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = np.dot(np.dot(np.linalg.inv(np.dot(X.T, X)), X.T), y)</span><br><span class="line">w</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[49.57840305],</span><br><span class="line">       [53.43695086]])</span><br></pre></td></tr></table></figure><p>bias = 49.58, w = 53.43으로 실제와 비슷하게 나온 걸 확인할 수 있다.</p><p>플로팅하면 다음과 같이 나온다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x_new = np.linspace(np.min(X0), np.max(X0), <span class="number">100</span>)</span><br><span class="line">X_new = sm.add_constant(x_new)</span><br><span class="line">y_new = np.dot(X_new, w)</span><br><span class="line"></span><br><span class="line">plt.scatter(X0, y, label=<span class="string">"data"</span>)</span><br><span class="line">plt.plot(x_new, y_new, <span class="string">'r-'</span>, label=<span class="string">"LR"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><center><img width="395" alt="2018-07-16 20 09 35" src="https://user-images.githubusercontent.com/32727529/42755704-414e7e9a-8934-11e8-9d9c-fe4a75f99962.png"></center><hr><h2 id="Scikit-Learn-패키지를-사용한-선형회귀분석"><a href="#Scikit-Learn-패키지를-사용한-선형회귀분석" class="headerlink" title="Scikit-Learn 패키지를 사용한 선형회귀분석"></a>Scikit-Learn 패키지를 사용한 선형회귀분석</h2><p>Scikit-Learn 패키지를 사용하여 선형회귀분석을 하는 경우에는 <code>linear_model</code> 서브 패키지의 <code>LinearRegression</code> 클래스를 사용한다. 상수항이 있어도 오그멘테이션은 하지 않아도 된다(없을 경우 <code>fit_intercept=false</code>).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">X0, y, coef = make_regression(n_samples=<span class="number">50</span>, n_features=<span class="number">1</span>, bias=bias, noise=<span class="number">5</span>, coef=<span class="keyword">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">model = LinearRegression(fit_intercept=<span class="keyword">True</span>)</span><br><span class="line">model = model.fit(X0, y)</span><br><span class="line">y_LRsci = model.predict(X0)</span><br><span class="line"></span><br><span class="line">plt.scatter(X0, y, label=<span class="string">"data"</span>)</span><br><span class="line">plt.plot(X0, y_LRsci, <span class="string">'r-'</span>, label=<span class="string">"Sklearn LR"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"x"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"y"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><center><img width="394" alt="2018-07-16 20 43 55" src="https://user-images.githubusercontent.com/32727529/42756906-05354826-8939-11e8-8495-bb28494b249b.png"></center><hr><h2 id="StatsModels-를-사용한-선형회귀분석"><a href="#StatsModels-를-사용한-선형회귀분석" class="headerlink" title="StatsModels 를 사용한 선형회귀분석"></a>StatsModels 를 사용한 선형회귀분석</h2><p>statsmodels 패키지에서는 OLS 클래스를 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"></span><br><span class="line">X0, y, coef = make_regression(n_samples=<span class="number">50</span>, n_features=<span class="number">1</span>, bias=bias, noise=<span class="number">5</span>, coef=<span class="keyword">True</span>, random_state=<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">x_new = sm.add_constant(X0) <span class="comment">#오그멘테이션 필요</span></span><br><span class="line"></span><br><span class="line">model = sm.OLS(y, x_new)</span><br><span class="line">result = model.fit()</span><br><span class="line">print(result.summary())</span><br></pre></td></tr></table></figure><p>OLS는 다음과 같이 <code>summary</code>라는 메서드를 이용하여 리포트를 출력할 수 있다.</p><center><img width="783" alt="2018-07-16 20 53 59" src="https://user-images.githubusercontent.com/32727529/42757303-790ca612-893a-11e8-99ab-3a0c79cbf225.png"></center><p>const(상수항)과 <script type="math/tex">x_1</script>의 coef는 동일하게 출력되는 것을 볼 수 있다.</p><hr><ul><li>ref : <a href="https://datascienceschool.net/view-notebook/58269d7f52bd49879965cdc4721da42d/" target="_blank" rel="noopener">https://datascienceschool.net/view-notebook/58269d7f52bd49879965cdc4721da42d/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;선형-회귀분석이란&quot;&gt;&lt;a href=&quot;#선형-회귀분석이란&quot; class=&quot;headerlink&quot; title=&quot;선형 회귀분석이란&quot;&gt;&lt;/a&gt;선형 회귀분석이란&lt;/h2&gt;&lt;p&gt;회귀분석(regression analysis)은, &lt;br&gt;독립 변수
        
      
    
    </summary>
    
      <category term="data science" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/"/>
    
      <category term="regression" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/regression/"/>
    
    
      <category term="data anaysis" scheme="https://github.com/j-haaaaan.github.io/tags/data-anaysis/"/>
    
      <category term="data" scheme="https://github.com/j-haaaaan.github.io/tags/data/"/>
    
      <category term="linear regression" scheme="https://github.com/j-haaaaan.github.io/tags/linear-regression/"/>
    
  </entry>
  
  <entry>
    <title>데이터 분석에 대하여</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/09/about-data-analysis/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/09/about-data-analysis/</id>
    <published>2018-07-09T11:25:04.000Z</published>
    <updated>2018-07-09T11:26:39.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="데이터와-나의-인연"><a href="#데이터와-나의-인연" class="headerlink" title="데이터와 나의 인연"></a>데이터와 나의 인연</h2><p> 나는 대학에서 산업공학을 전공했고, 학교에서 온갖 잡다한 공학 개념들에 대해서 배웠다. 할 줄 아는게 많다는 말이 아니라, 부끄럽지만 오히려 제대로 할 줄 아는게 없다는 게 스스로도 더 맞다고 생각한다<font color="#C6C6C6">(하지만 그게 단점이라고 할 순 없다)</font>.</p><p> 그 중에서도 나는 <font color="#C6C6C6">(보편적으로 그 당시 산업공학과 학생들이)</font>아무도 좋아하지 않던 데이터베이스 수업을 흥미로워 했었다. 그 교수님과 과목이 좋아서 그 lab에서 인턴을 자처해서 했었다. 그 lab은 데이터 분석을 하는 lab은 아니고, 오히려 <strong>데이터 엔지니어링</strong>을 하는 곳이었다<font color="#C6C6C6">(리눅스로 아파치 하둡을 설치하고 빅데이터를 처리하기 위한 분산 시스템 알고리즘을 연구하는)</font>.</p><p> 아무튼, 그 lab에서의 외계어들은 나에겐 너무 어려웠고, 제대로 된 멘토도 없었기에, 구관이 명관이라는 착각으로 누구나 안전하다<font color="#C6C6C6">(안전하다는 건, challengable하지 않은 분야라는 뜻)</font>고 느끼는 <strong>품질</strong>분야로 첫 직장에 취업했다. 그리고 그 첫 직장에서, 공교롭게도 내가 맡은 업무는 <strong>엑셀 데이터 관리</strong>였다. 지금 생각해보면 그 일은 신입사원에게 맡기기엔 너무나도 위험한(?) 일이었다<font color="#C6C6C6">(신입사원이 분석한 데이터를 기반으로 회사 운영진의 의사결정이 이뤄졌었다)</font>. 게다가 엑셀로 약 1,000 줄의 데이터로 시작한 일이, 10,000줄 정도가 넘어가자 데이터를 로드하는것도 어려울 정도로 느려졌다.</p><p> 그 회사를 때려치고, 제대로 데이터를 멋있게 만지는 테크닉들을 배움과 동시에 데이터와의 인연을 이어가고 싶어서 <strong>Python과 머신 러닝(Machine Learning)</strong> 이라는 분야를 배우기 시작했다. 내가 배움을 가진 그 곳에서의 자료들을 토대로, 내 나름대로 데이터 분석과 ML, 그리고 이 꾸준함이 지속 된다면 나아가서 딥러닝(Deep Learning)까지도 자습하면서 정리해보려고 한다.<br> <br></p><hr><h2 id="데이터-분석은-무엇일까"><a href="#데이터-분석은-무엇일까" class="headerlink" title="데이터 분석은 무엇일까"></a>데이터 분석은 무엇일까</h2><p> 데이터 분석이라는 말을 포괄하는 단어로, <strong>데이터 사이언스</strong> 라는 단어가 있다. <strong>데이터 사이언스는 데이터를 수집/분석/활용하기 위한 모든 기술의 집합</strong> 을 말한다.</p><p> 데이터 분석은, 어떤 <strong>입력 데이터(X, input, 독립변수, 설명변수)</strong> 가 주어지면,</p><ul><li>X간의 관계를 파악</li><li>X들을 이용하여 <strong>출력 데이터(y, class, label, 종속변수)</strong> 를 출력하는 과정이다.</li></ul><p>X들을 이용하여 y를 출력하는 작업을 <font color="Blue"><strong>예측(Prediction)</strong></font>이라고 한다.</p><center>![inout](https://user-images.githubusercontent.com/32727529/42447628-8a3252c8-83b5-11e8-9b8c-d4af3dbd488e.png)<font color="gray" size="2"> 입력 데이터(X)와 출력데이터(y)간의 관계</font></center><p><br></p><hr><h2 id="예측-방법을-푸는-방법"><a href="#예측-방법을-푸는-방법" class="headerlink" title="예측 방법을 푸는 방법"></a>예측 방법을 푸는 방법</h2><p>이러한 예측 문제를 풀기 위한 방법론으로는 <strong>1)규칙 기반(rule-based)</strong> 방법과 <strong>2)학습 기반(training-based)</strong> 방법이라는 두 가지 방법이 사용된다.</p><ul><li><strong>1) 규칙 기반 방법</strong> : 입-출력간의 규칙(rule)을 <strong>사람이 미리 만들어</strong> 놓는다.</li><li><strong>2) 학습 기반 방법</strong> : 사람은 데이터만 컴퓨터에게 보여주고, <strong>컴퓨터가 직접 규칙을 찾게 한다.</strong></li></ul><p>영어 번역을 예로 들면, 1)같은 경우 영어 사전의 뜻과 규칙을 사용하는 것이고, 2)같은 경우는 사전의 예문을 컴퓨터에게 노출 시키는 것이다.</p><p>학습 기반 방법은 컴퓨터가 직접 규칙을 찾을 수 있는 <strong>학습용 데이터 집합(training data set)</strong> 를 사람이 만들어 주어야 한다. 컴퓨터를 학생에 비유한다면, 답이 표시된 문제집을 주고 답의 패턴(규칙)을 학습하게 한 후, 시험을 얼마나 잘 치는지를 확인하는 것이다. 이러한 과정을 문제 풀이 방법을 조금씩 바꾸면서 반복한다. 그래서 이러한 과정을 <strong>지도 학습(supervised learning)</strong> 이라고 한다.<br><br></p><hr><p>데이터 분석의 개념과 예측의 개념에 대해서 아주 low한 시점으로 정리해 보았다. 데이터 분석에서의 사용한 예측의 영어단어는 <font color="red"><strong>forecast</strong></font>가 아닌 <font color="blue"><strong>prediction</strong></font> 를 사용함에 주의해야 한다. 과거의 값을 이용해 미래의 값을 예측하는 것이 아니라, <strong>주어진 데이터를 가지고 새로 주어지는 데이터</strong> 의 target을 맞추는 것이라는 점이 중요하다.</p><ul><li>ref : <a href="https://datascienceschool.net/view-notebook/d67e9751b6ff463582aa4cc6d4f5b5e3/" target="_blank" rel="noopener">https://datascienceschool.net/view-notebook/d67e9751b6ff463582aa4cc6d4f5b5e3/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;데이터와-나의-인연&quot;&gt;&lt;a href=&quot;#데이터와-나의-인연&quot; class=&quot;headerlink&quot; title=&quot;데이터와 나의 인연&quot;&gt;&lt;/a&gt;데이터와 나의 인연&lt;/h2&gt;&lt;p&gt; 나는 대학에서 산업공학을 전공했고, 학교에서 온갖 잡다한 공학
        
      
    
    </summary>
    
      <category term="data science" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/"/>
    
      <category term="theory" scheme="https://github.com/j-haaaaan.github.io/categories/data-science/theory/"/>
    
    
      <category term="data anaysis" scheme="https://github.com/j-haaaaan.github.io/tags/data-anaysis/"/>
    
      <category term="data" scheme="https://github.com/j-haaaaan.github.io/tags/data/"/>
    
      <category term="machine learning" scheme="https://github.com/j-haaaaan.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>&lt;font size=6&gt;(Lyrics)&lt;/font&gt;&lt;br&gt;Wouter Hamel - Details</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/07/wouterhamel-theonlyone-lyrics/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/07/wouterhamel-theonlyone-lyrics/</id>
    <published>2018-07-07T08:22:40.000Z</published>
    <updated>2018-07-07T08:58:07.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/32727529/42408686-e56b1b9a-820a-11e8-8120-5629ab839a49.jpg" alt="wouterhamel"></p><center><font color="violet" size="5"> **Wouter Hamel - Details ** </font><br><br>A humdrum Tuesday morningWhen nothing's any goodI try to get to workBut I can't get out of this moodA dreary Friday eveningMy friends are all in townI plan to join them laterBut my blues are still aroundDon't wanna waste my time on cryingThings that you say won't tear me downWhat can I do when you've been lyingI can't be bothered by those memoriesSpare me the sordid uncouth detailsThe image is vivid in my mindI needn't fantasize to pictureThe love we had was ruined too soonYou'd woo me with your love songYou'd tempt me with your eyesYou'd send me reeling high aboveInto orange coloured skiesYou'd play on your pianoYou wrote me poetryWith lovey-dovey metaphorsAll leadin' back to meDon't wanna go back to the old daysWhen love used to blind me every dayGuess I was lost inside your love mazeBut now the air is clear enough to see<font color="#C6C6C6">Piano Solo</font>I was all dressed upWith nowhere to goYou had me from the startYou had me from helloBut now i'm free to fly awayInto a brand new lovely dayI'm leaving you behindSpare me the grungy grimy detailsThe image is life like as it isI can see you and him before meThe love we had was rudely traded inSpare me the sordid uncouth detailsThe image is vivid in my mindI needn't fantasize to pictureThe love we had was ruinedOh, can't you see it's ruinedThe love we had was ruinedToo soon</center>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/32727529/42408686-e56b1b9a-820a-11e8-8120-5629ab839a49.jpg&quot;
        
      
    
    </summary>
    
      <category term="music" scheme="https://github.com/j-haaaaan.github.io/categories/music/"/>
    
      <category term="jazz" scheme="https://github.com/j-haaaaan.github.io/categories/music/jazz/"/>
    
    
      <category term="music" scheme="https://github.com/j-haaaaan.github.io/tags/music/"/>
    
      <category term="wouter hamel" scheme="https://github.com/j-haaaaan.github.io/tags/wouter-hamel/"/>
    
      <category term="jazz" scheme="https://github.com/j-haaaaan.github.io/tags/jazz/"/>
    
  </entry>
  
  <entry>
    <title>Youtube 썸네일을 가져오자</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/04/youtube-by-markdown/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/04/youtube-by-markdown/</id>
    <published>2018-07-04T06:42:04.000Z</published>
    <updated>2018-07-04T06:49:19.404Z</updated>
    
    <content type="html"><![CDATA[<p>  Youtube는 항상 영상을 찾아보거나, 음원사이트에 안나오는 음원을 찾아보거나, 관심있는 유튜버를 구독하는 기능만 사용했었다.<br> 근데 Youtube에 올라온 영상을 <code>.mp4</code> 확장자로 저장하는 기능도 있고, 썸네일을 따는 기능도 있다<font color="#C6C6C6">(이제야 알게된 원시인)</font>.</p><p>아무튼 이 포스팅에서는,</p><ul><li>마크다운으로 Youtube영상의 <code>썸네일</code>을 올리고, 그 썸네일을 통해 해당 영상 링크로 이동하는 방법!</li><li>해당 video를 <code>.mp4</code>를 내 로컬에 다운받는 방법!</li></ul><p>두 가지에 대해서 알아보려고 한다.</p><p>내가 좋아하는 유튜버, 영국남자의 컨텐츠로 실험을 해보자.</p><blockquote><p><a href="https://youtu.be/lCPsMawKJLQ" target="_blank" rel="noopener">https://youtu.be/lCPsMawKJLQ</a></p></blockquote><hr><h2 id="썸네일-주소-링크-따기"><a href="#썸네일-주소-링크-따기" class="headerlink" title="썸네일 주소 링크 따기"></a>썸네일 주소 링크 따기</h2><p>먼저, Youtube의 모든 클립에는 고유 번호가 있다.</p><center><img width="800" alt="youtube_img" src="https://user-images.githubusercontent.com/32727529/42254824-9810093e-7f83-11e8-9da5-c670a2f6323c.png"><font color="gray" size="2">영국남자, _한국 술+안주를 처음 먹어본 데드풀의 반응!?_ <br>링크 끝의 `lCPsMawKJLQ` 요부분이 고유 번호이다</font></center><p>고유 번호를 찾았다면, 여러가지 방법으로 썸네일을 추출할 수 있다.</p><ul><li><p>기본화면 : 480x360<br><a href="https://i.ytimg.com/vi/lCPsMawKJLQ/0.jpg" target="_blank" rel="noopener">https://i.ytimg.com/vi/lCPsMawKJLQ/0.jpg</a></p></li><li><p>시작화면 : 120x90<br><a href="https://i.ytimg.com/vi/lCPsMawKJLQ/1.jpg" target="_blank" rel="noopener">https://i.ytimg.com/vi/lCPsMawKJLQ/1.jpg</a></p></li><li><p>중간화면 : 120x90<br><a href="https://i.ytimg.com/vi/lCPsMawKJLQ/2.jpg" target="_blank" rel="noopener">https://i.ytimg.com/vi/lCPsMawKJLQ/2.jpg</a></p></li><li><p>종료화면 : 120x90<br><a href="https://i.ytimg.com/vi/lCPsMawKJLQ/3.jpg" target="_blank" rel="noopener">https://i.ytimg.com/vi/lCPsMawKJLQ/3.jpg</a></p></li><li><p>기본 (큰화면) : 480x360<br><a href="http://i.ytimg.com/vi/lCPsMawKJLQ/hqdefault.jpg" target="_blank" rel="noopener">http://i.ytimg.com/vi/lCPsMawKJLQ/hqdefault.jpg</a></p></li><li><p>기본 (중간) : 320x180<br><a href="http://i.ytimg.com/vi/lCPsMawKJLQ/mqdefault.jpg" target="_blank" rel="noopener">http://i.ytimg.com/vi/lCPsMawKJLQ/mqdefault.jpg</a></p></li><li><p>기본 (일반) : 120x90<br><a href="http://i.ytimg.com/vi/lCPsMawKJLQ/default.jpg" target="_blank" rel="noopener">http://i.ytimg.com/vi/lCPsMawKJLQ/default.jpg</a></p></li><li><p>기본 : 640x480<br><a href="http://i.ytimg.com/vi/lCPsMawKJLQ/sddefault.jpg" target="_blank" rel="noopener">http://i.ytimg.com/vi/lCPsMawKJLQ/sddefault.jpg</a></p></li><li><p>기본 : 1920x1080<br><a href="http://i.ytimg.com/vi/lCPsMawKJLQ/maxresdefault.jpg" target="_blank" rel="noopener">http://i.ytimg.com/vi/lCPsMawKJLQ/maxresdefault.jpg</a></p></li></ul><hr><h2 id="썸네일을-마크다운으로"><a href="#썸네일을-마크다운으로" class="headerlink" title="썸네일을 마크다운으로"></a>썸네일을 마크다운으로</h2><p>자, 이제 원하는 썸네일 주소를 얻는 법을 알았으니, 마크다운에 담아보자.<br>양식은 아래와 같다.<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">설명</span>](<span class="link">썸네일링크</span>)](<span class="link">영상링크</span>)</span><br></pre></td></tr></table></figure></p><p>영상 링크에 원래 Youtube영상 링크를 넣으면, <strong>클릭 시에 링크로 넘어가도록</strong> 할 수 있다.</p><p>해볼까?</p><ul><li><p>기본화면 : 480x360</p><center>![설명](https://i.ytimg.com/vi/lCPsMawKJLQ/0.jpg)</center></li><li><p>시작화면 : 120x90</p><center>![설명](https://i.ytimg.com/vi/lCPsMawKJLQ/1.jpg)</center></li><li><p>중간화면 : 120x90</p><center>![설명](https://i.ytimg.com/vi/lCPsMawKJLQ/2.jpg)</center></li><li><p>종료화면 : 120x90</p><center>![설명](https://i.ytimg.com/vi/lCPsMawKJLQ/3.jpg)</center></li><li><p>기본 (큰화면) : 480x360</p><center>![설명](http://i.ytimg.com/vi/lCPsMawKJLQ/hqdefault.jpg)</center></li><li><p>기본 (중간) : 320x180</p><center>![설명](http://i.ytimg.com/vi/lCPsMawKJLQ/mqdefault.jpg)</center></li><li><p>기본 (일반) : 120x90</p><center>![설명](http://i.ytimg.com/vi/lCPsMawKJLQ/default.jpg)</center></li><li><p>기본 : 640x480</p><center>![설명](http://i.ytimg.com/vi/lCPsMawKJLQ/sddefault.jpg)</center></li><li><p>기본 : 1920x1080</p><center>![설명](http://i.ytimg.com/vi/lCPsMawKJLQ/maxresdefault.jpg)</center></li></ul><hr><h2 id="Youtube-영상-다운받기"><a href="#Youtube-영상-다운받기" class="headerlink" title="Youtube 영상 다운받기"></a>Youtube 영상 다운받기</h2><p>이건 정말 너무 쉽다.<br>원하는 영상이 틀어지고 있는 그 페이지 링크에 <code>ss</code>만 추가해주면 된다.</p><center>https://www.youtube.com/watch?v=lCPsMawKJLQ&t=1s<br><font color="blue">youtube 앞에 ss를 추가해서</font> <br>https://www.ssyoutube.com/watch?v=lCPsMawKJLQ&t=1s</center><p>참 쉽죠?<br>ss를 추가한 링크에 들어가보면,</p><p><center><img width="800" alt="youtube_img2" src="https://user-images.githubusercontent.com/32727529/42260663-3be5ac64-7fa0-11e8-9568-3828414e6036.png"></center></p><p>저 오른쪽에 <font color="navy"><strong>download video in browser</strong></font>가 있다. 이걸 클릭해서 다운받으면 끝!</p><hr><p>블로그에 참고 관련, 영상들을 올리고 싶을 때 유용하게 쓸 수 있을 것 같다.</p><ul><li>ref : <a href="https://gs.saro.me/#!m=elec&amp;jn=382" target="_blank" rel="noopener">https://gs.saro.me/#!m=elec&amp;jn=382</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;  Youtube는 항상 영상을 찾아보거나, 음원사이트에 안나오는 음원을 찾아보거나, 관심있는 유튜버를 구독하는 기능만 사용했었다.&lt;br&gt; 근데 Youtube에 올라온 영상을 &lt;code&gt;.mp4&lt;/code&gt; 확장자로 저장하는 기능도 있고,
        
      
    
    </summary>
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/categories/blog/"/>
    
      <category term="youtube" scheme="https://github.com/j-haaaaan.github.io/categories/blog/youtube/"/>
    
    
      <category term="image" scheme="https://github.com/j-haaaaan.github.io/tags/image/"/>
    
      <category term="youtube" scheme="https://github.com/j-haaaaan.github.io/tags/youtube/"/>
    
      <category term="link" scheme="https://github.com/j-haaaaan.github.io/tags/link/"/>
    
      <category term="markdown" scheme="https://github.com/j-haaaaan.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Lyric video 만들기 최강 어플, &lt;br&gt;Superstring를 사용하다</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/07/03/superstring/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/07/03/superstring/</id>
    <published>2018-07-03T06:12:38.000Z</published>
    <updated>2018-07-04T02:50:54.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Superstring을-사용하여-Lyric-video라는-것을-만들어보자"><a href="#Superstring을-사용하여-Lyric-video라는-것을-만들어보자" class="headerlink" title="Superstring을 사용하여 Lyric video라는 것을 만들어보자."></a>Superstring을 사용하여 Lyric video라는 것을 만들어보자.</h1><p>최근에 아끼는 동생의 결혼식 축가 부탁을 받았다<font color="#C6C6C6">(혼자는 아니고 단체로 ㅋㅋ)</font>.<br>깊은 사명감을 가지고.. 머리를 굴려 아이디어를 궁리하던 중에, 아래와 같은 영상을 발견했다.</p><center>[![설명](https://i.ytimg.com/vi/0kA25hgUAG0/sddefault.jpg)](https://youtu.be/0kA25hgUAG0)</center><p>위와 같은 식의 영상을 <strong>Lyric video</strong> 라고 하는데, 일반적으로 알 고 있는 music video와 다르게 노래 흐름에 맞게 <strong>가사만</strong> 보여주는 영상이다<font color="#C6C6C6">(<del>공식 영상이 있을 때도 많지만 거의 다 불법 업로드</del>)</font>.<br>아무튼 위와 같은 영상을 만들어서 축가할 때 틀어주면<br></p><ul><li>축가자는 가사를 안까먹는다.</li><li>관객이 보면서 따라불러서 분위기가 좋아질 것이다<font color="#C6C6C6">(라는 나의 바람)</font>.<br><br><center>[![설명](https://i.ytimg.com/vi/hUWvlLIsbS0/hqdefault.jpg)](https://youtu.be/hUWvlLIsbS0)<font color="gray" size="2">유튜브에서 쉽게 검색할 수 있다! [Coldplay - Magic] </font></center></li></ul><p>Lyric video는 Youtube에서 조회수를 올리기 위해서 신곡이 발표되고 음원이 나오기 전에 녹음해서 가사만 입혀서 유튜브에 내놓는 식으로 많이들 업로드하는 것 같다.</p><p>아무튼 이런 BGM이 들어간 영상 작업은 또 태어나서 처음하는 거라<font color="#C6C6C6">(태어나서 처음 하는게 제일 재밌다)</font>, 처음엔 멍청하게 keynote부터 켰다.ㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋㅋ</p><p>어제 그렇게 keynote로 두어 시간을 개고생을 하고, 원시인이 된 기분이라, 이건 아니다 싶어 답답해서 구글링해서 찾은 Witten Lab사에서 만든 <code>Superstring</code> !</p><center><img width="700" alt="wittenlab" src="https://user-images.githubusercontent.com/32727529/42210224-92ae86b6-7eeb-11e8-8b60-6a15d2626178.png">https://sways.io/</center><p>Superstring의 최대 장점은, <strong>직관적으로 BGM 시간이 보여진다</strong> 는 것이다.</p><p><img width="800" alt="2018-07-03 18 14 57" src="https://user-images.githubusercontent.com/32727529/42210888-1ea58dbc-7eed-11e8-847b-93a8e4a1992f.png"></p><p>음악을 들으면서 타이밍에 따라 저 텍스트 박스들을 드래그해서 올리거나 끌어내리거나 하기만 하면 된다<font color="#C6C6C6">(keynote 사용한 나는 뭘 한것인가..ㅠㅠ)</font>.<br>오른쪽에서 텍스트의 style들을 정의해줄 수 있고, <code>enter</code>키를 치거나 오른쪽 상단의 뮤비 화면을 클릭하면, 큰 화면으로 볼 수 있다.<br><br><br><br></p><h2 id="그렇다면-이렇게나-좋은-Superstring의-단점은"><a href="#그렇다면-이렇게나-좋은-Superstring의-단점은" class="headerlink" title="그렇다면, 이렇게나 좋은 Superstring의 단점은?"></a>그렇다면, 이렇게나 좋은 Superstring의 단점은?</h2><ul><li>360p까지만 무료이고, <font color="red">HD영상은 유료다</font><font color="#C6C6C6">(하여간 좋은 것들은 다 돈이다)</font>.</li></ul><p>그것 말고는 모든게 직관적이라 지나가던 신생아도 할 수 있을 정도다.<br>이제는 디지털시대에 프레젠테이션 같은걸로 화면 녹화를 뜨는 원시인같은 행위는 하지말자.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;Superstring을-사용하여-Lyric-video라는-것을-만들어보자&quot;&gt;&lt;a href=&quot;#Superstring을-사용하여-Lyric-video라는-것을-만들어보자&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="tools" scheme="https://github.com/j-haaaaan.github.io/categories/tools/"/>
    
      <category term="video" scheme="https://github.com/j-haaaaan.github.io/categories/tools/video/"/>
    
    
      <category term="Superstring" scheme="https://github.com/j-haaaaan.github.io/tags/Superstring/"/>
    
      <category term="lyric" scheme="https://github.com/j-haaaaan.github.io/tags/lyric/"/>
    
      <category term="video" scheme="https://github.com/j-haaaaan.github.io/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>이미지를 업로드 해보자!</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/06/30/uploading-images/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/06/30/uploading-images/</id>
    <published>2018-06-30T01:32:01.000Z</published>
    <updated>2018-07-04T02:51:05.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="이미지를-업로드-해보자"><a href="#이미지를-업로드-해보자" class="headerlink" title="이미지를 업로드 해보자!"></a>이미지를 업로드 해보자!</h1><p>필자는 사진찍는 걸 좋아하기 때문에, 이 블로그에 <strong>사진을 굉장히 많이 업로드하게 될 것 같은</strong> 느낌적인 느낌이 든다. 그래서 블로그에 대한 형태와 시스템이 조금 익숙해지면, 사진 올리는 법부터 익히려 했다.</p><p>근데 찾아보니 굉장히 쉬움..</p><p>폭풍 사진 업로드를 위해서 어떻게 업로드 하는지 단계별로 알아보자<font color="gray"><del>(단계랄 것도 없을 정도로 쉽다)</del></font>.</p><hr><h4 id="1-먼저-Github-repo에서-issue-탭으로-들어가서-new-issue를-클릭한다"><a href="#1-먼저-Github-repo에서-issue-탭으로-들어가서-new-issue를-클릭한다" class="headerlink" title="1. 먼저 Github repo에서 issue 탭으로 들어가서 new issue를 클릭한다."></a>1. 먼저 Github repo에서 issue 탭으로 들어가서 <code>new issue</code>를 클릭한다.</h4><p><img width="1016" alt="2018-06-30 09 29 51" src="https://user-images.githubusercontent.com/32727529/42119671-8c41a852-7c49-11e8-822e-60c24ef5fa63.png"></p><hr><h4 id="2-올리고-싶은-이미지를-drag-amp-drop으로-comment창에-올린다"><a href="#2-올리고-싶은-이미지를-drag-amp-drop으로-comment창에-올린다" class="headerlink" title="2. 올리고 싶은 이미지를 drag &amp; drop으로 comment창에 올린다."></a>2. 올리고 싶은 이미지를 <code>drag &amp; drop</code>으로 comment창에 올린다.</h4><p><img width="838" alt="2018-06-30 09 45 12" src="https://user-images.githubusercontent.com/32727529/42119742-6015647a-7c4a-11e8-9d68-27470104abd5.png"></p><hr><h4 id="3-약-5초-정도-기다리면-아래와-같이-markdown-혹은-html로-텍스트가-써진다-이-텍스트를-포스팅글에-통째로-복붙하면-된다-아마도-“-png”는-html로-“-jpg”는-md로-생성되는-것-같다"><a href="#3-약-5초-정도-기다리면-아래와-같이-markdown-혹은-html로-텍스트가-써진다-이-텍스트를-포스팅글에-통째로-복붙하면-된다-아마도-“-png”는-html로-“-jpg”는-md로-생성되는-것-같다" class="headerlink" title="3. 약 5초 정도 기다리면 아래와 같이 markdown 혹은 html로 텍스트가 써진다. 이 텍스트를 포스팅글에 통째로 복붙하면 된다(아마도 “.png”는 html로, “.jpg”는 md로 생성되는 것 같다)."></a>3. 약 5초 정도 기다리면 아래와 같이 <code>markdown 혹은 html</code>로 텍스트가 써진다. 이 텍스트를 포스팅글에 통째로 복붙하면 된다<font color="gray"><em>(아마도 “.png”는 html로, “.jpg”는 md로 생성되는 것 같다)</em></font>.</h4><p><img width="1017" alt="2018-06-30 09 30 33" src="https://user-images.githubusercontent.com/32727529/42119870-283d473c-7c4c-11e8-9c41-c4109fa0b9d6.png"></p><p><img src="https://user-images.githubusercontent.com/32727529/42119444-d42c6434-7c46-11e8-9265-40a779f7a969.jpg" alt="img_0048" title="짠!"></p><p style="text-align: center;"> <font color="gray"> 짠! </font></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;이미지를-업로드-해보자&quot;&gt;&lt;a href=&quot;#이미지를-업로드-해보자&quot; class=&quot;headerlink&quot; title=&quot;이미지를 업로드 해보자!&quot;&gt;&lt;/a&gt;이미지를 업로드 해보자!&lt;/h1&gt;&lt;p&gt;필자는 사진찍는 걸 좋아하기 때문에, 이 블로그에
        
      
    
    </summary>
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/categories/blog/"/>
    
      <category term="images" scheme="https://github.com/j-haaaaan.github.io/categories/blog/images/"/>
    
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/tags/blog/"/>
    
      <category term="posting" scheme="https://github.com/j-haaaaan.github.io/tags/posting/"/>
    
      <category term="image" scheme="https://github.com/j-haaaaan.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>마크다운 문법 공부하기</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/06/26/studying-markdown-language/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/06/26/studying-markdown-language/</id>
    <published>2018-06-26T10:19:17.000Z</published>
    <updated>2018-07-16T09:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<p> 블로그는 시작했는데, 막상 할 줄 아는 건 워드프로세서에 글 쓰듯이 쓰는 것 밖에 없다.<br> 실제로 글을 쓸 때에도 좋은 만년필로 좋은 노트에 글을 쓰면 예쁘게 써 지듯이, 내가 원하는 글씨체와 모양, 그림을 넣을 수 있는 능력을 기르면, 더 멋진 블로그가 될 것이다.</p><p> 그러기 위해서 반드시 거쳐야하는 문법! 바로 <strong>마크다운(Markdown)</strong> 이다.</p><hr><p><strong>1. 제목(Headers)</strong><br> 제목은 <code>#</code>을 붙이고 한 칸 띄어서 쓴다. <code>#</code>은 한 개 부터 여섯 개까지 쓸 수 있다(작아진다).</p><blockquote><h1 id="title-1개"><a href="#title-1개" class="headerlink" title="title(1개)"></a>title(1개)</h1><h2 id="title-2개"><a href="#title-2개" class="headerlink" title="title(2개)"></a>title(2개)</h2><h3 id="title-3개"><a href="#title-3개" class="headerlink" title="title(3개)"></a>title(3개)</h3><h4 id="title-4개"><a href="#title-4개" class="headerlink" title="title(4개)"></a>title(4개)</h4><h5 id="title-5개"><a href="#title-5개" class="headerlink" title="title(5개)"></a>title(5개)</h5><h6 id="title-6개"><a href="#title-6개" class="headerlink" title="title(6개)"></a>title(6개)</h6></blockquote><p> <code>===</code>나 <code>--</code>을 이용해서도 쓸 수 있다.</p><blockquote><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><hr></blockquote><p><strong>2. 코드 블럭(Code Blocks)</strong><br> ` 나 <code>~</code> 를 코드 시작 줄과 마지막 줄에 넣어주면 된다(3개씩).<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(<span class="string">"hello python!"</span>)</span><br></pre></td></tr></table></figure></p><hr><p><strong>3. 인용문(Blockquotes)</strong></p><p> 일반 인용문만 삽입할 때는 <code>&gt;</code>에 텍스트만 추가해주면 된다.<br> 만약 책의 인용문을 넣고 싶다면, 다음과 같이 한다.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block quote 저자명, 제목 %&#125;</span><br><span class="line">인 용 문</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure> <blockquote><p>Sans toi, les émotions d’aujourd’hui ne seraient que la peau morte des émotions d’autrefois.</p><footer><strong>Jean-Pierre Jeunet</strong><cite>Le Fabuleux Destin d'Amélie Poulain</cite></footer></blockquote><hr><p><strong>4. 인라인 코드 Inline Code Blocks</strong><br> `  과 ` 사이에 글을 쓰면 된다(Mac 키보드 기준으로 숫자 1 왼쪽에 있음. Back Quote라고 부른다).</p><blockquote><p><code>슬랙에서 많이 쓰는 인라인 코드 블록</code></p><hr></blockquote><p><strong>5. 이탤릭체와 볼드체</strong><br> * 이탤릭체 <em><br> *<em> 볼드체 </em></em></p><blockquote><p><em>이탤릭체</em><br><strong> 볼드체 </strong></p><hr></blockquote><p><strong>6. 수평선</strong><br> <code>*</code> 또는 <code>_</code>을 3개 이상 쓴다.</p><blockquote><hr></blockquote><p><strong>7. 취소선</strong><br>  <code>~</code> 을 앞뒤로 2개 쓴다.</p><blockquote><p><del>취소선</del></p></blockquote><hr><p>이상 마크 다운의 기본적인 문법에 대해서 알아보았다. 뭔가 슬랙을 많이 써서 그런가, syntax가 크게 어렵진 않은 것 같다. 포스팅을 많이 해보면 손에 금방 익을 것 같다.</p><p>ref : <a href="https://simhyejin.github.io/2016/06/30/Markdown-syntax/#headers" target="_blank" rel="noopener">https://simhyejin.github.io/2016/06/30/Markdown-syntax/#headers</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt; 블로그는 시작했는데, 막상 할 줄 아는 건 워드프로세서에 글 쓰듯이 쓰는 것 밖에 없다.&lt;br&gt; 실제로 글을 쓸 때에도 좋은 만년필로 좋은 노트에 글을 쓰면 예쁘게 써 지듯이, 내가 원하는 글씨체와 모양, 그림을 넣을 수 있는 능력을 기르면,
        
      
    
    </summary>
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/categories/blog/"/>
    
      <category term="markdown" scheme="https://github.com/j-haaaaan.github.io/categories/blog/markdown/"/>
    
    
      <category term="Markdown" scheme="https://github.com/j-haaaaan.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo blog 포스팅은 어떻게?</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/06/26/how-to-post/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/06/26/how-to-post/</id>
    <published>2018-06-26T04:46:59.000Z</published>
    <updated>2018-07-03T10:39:49.876Z</updated>
    
    <content type="html"><![CDATA[<ul><li>title: “Clean-blog 테마를 적용하다.”           <code>#post 제목</code></li><li>date: 2017-07-07 00:23:23                     <code>#post 생성 날짜</code></li><li>tags: [“hexo”, “clean-blog”, “theme”]         <code>#tags</code></li><li>cover: /assets/contact-bg.jpg                 <code>#post 커버 이미지</code></li><li>subtitle: “처음으로 테마를 적용해보다.”         <code>#post 부제목</code></li></ul><hr><p>ref : <a href="https://kdydesign.github.io/2017/07/07/hexo-themes/" target="_blank" rel="noopener">https://kdydesign.github.io/2017/07/07/hexo-themes/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;title: “Clean-blog 테마를 적용하다.”           &lt;code&gt;#post 제목&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;date: 2017-07-07 00:23:23                     &lt;code&gt;#post
        
      
    
    </summary>
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/tags/blog/"/>
    
      <category term="posting" scheme="https://github.com/j-haaaaan.github.io/tags/posting/"/>
    
      <category term="hexo" scheme="https://github.com/j-haaaaan.github.io/tags/hexo/"/>
    
      <category term="포스팅" scheme="https://github.com/j-haaaaan.github.io/tags/%ED%8F%AC%EC%8A%A4%ED%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>들어가며</title>
    <link href="https://github.com/j-haaaaan.github.io/2018/06/25/first-post/"/>
    <id>https://github.com/j-haaaaan.github.io/2018/06/25/first-post/</id>
    <published>2018-06-25T13:02:57.000Z</published>
    <updated>2018-07-03T10:39:44.424Z</updated>
    
    <content type="html"><![CDATA[<p>처음은 언제나 어렵지.<br>평생 안하던 블로그를 해보겠다고 hexo를 어깨너머로 듣고 구글링한지 3일 만에야,<br>드디어 구조를 이해하고, git을 다시 이해하고…</p><p>아무튼 이제부터 여기에 내가 좋아하는 모든 것들을 담아보려고 한다.<br>싫다가도 좋은 게 생길 수 있고, 좋다가도 싫어질 수도 있겠지.</p><p>아무튼 이 블로그는 내가 좋아하는 것들을 꾸준히 이어나가기에 아주 좋은 동기부여이자, 일기장이자, 채찍이 될 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;처음은 언제나 어렵지.&lt;br&gt;평생 안하던 블로그를 해보겠다고 hexo를 어깨너머로 듣고 구글링한지 3일 만에야,&lt;br&gt;드디어 구조를 이해하고, git을 다시 이해하고…&lt;/p&gt;
&lt;p&gt;아무튼 이제부터 여기에 내가 좋아하는 모든 것들을 담아보려고
        
      
    
    </summary>
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://github.com/j-haaaaan.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
